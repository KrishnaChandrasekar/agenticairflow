services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
    - postgres-db-volume:/var/lib/postgresql/data
    ports:
    - 5432:5432
    networks:
    - agentic_net

  redis:
    image: redis:6-alpine
    ports:
    - 6379:6379
    networks:
    - agentic_net

  airflow-init:
    image: apache/airflow:2.10.5
    depends_on:
    - postgres
    - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    entrypoint:
    - /bin/bash
    - -c
    command:
    - airflow db migrate && airflow users create --username admin --password admin
      --firstname a --lastname d --role Admin --email a@b.c || true
    networks:
    - agentic_net
    
  webserver:
    image: apache/airflow:2.10.5
    depends_on:
    - airflow-init
    - postgres
    - redis
    - scheduler
    - worker
    - triggerer
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW_CONN_AGENTIC_SSH_DEFAULT: http://:router-secret@router:8000
    volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    ports:
    - 8080:8080
    command: webserver
    networks:
    - agentic_net
  
  scheduler:
    image: apache/airflow:2.10.5
    depends_on:
    - airflow-init
    - postgres
    - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW_CONN_AGENTIC_SSH_DEFAULT: http://:router-secret@router:8000
    volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    command: scheduler
    networks:
    - agentic_net
  
  worker:
    image: apache/airflow:2.10.5
    depends_on:
    - airflow-init
    - postgres
    - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW_CONN_AGENTIC_SSH_DEFAULT: http://:router-secret@router:8000
    volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    command: celery worker
    networks:
    - agentic_net
    
  triggerer:
    image: apache/airflow:2.10.5
    depends_on:
    - airflow-init
    - postgres
    - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW_CONN_AGENTIC_SSH_DEFAULT: http://:router-secret@router:8000
    volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    command: triggerer
    networks:
    - agentic_net

  router:
    build:
      context: .
      dockerfile: docker/Dockerfile.router
    environment:
      DATABASE_URL: sqlite:////data/db.sqlite
      ROUTER_TOKEN: router-secret
      AGENT_TOKEN: agent-secret
    volumes:
    - router_db:/data
    - ./router:/app 
    ports:
    - 8000:8000
    networks:
    - agentic_net
  router-ui:
    build:
      context: ./ui-react
      dockerfile: ../docker/Dockerfile.router-ui
    depends_on:
      - router
    ports:
      - "8090:80"
    environment:
      ROUTER_URL: http://router:8000
      ROUTER_TOKEN: router-secret
    networks:
      - agentic_net

  agent_vm1:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    environment:
      AGENT_ID: vm1
      ROUTER_URL: http://router:8000
      AGENT_TOKEN: agent-secret
      AGENT_LABELS: '{"os":"linux","zone":"dev"}'
      SELF_URL: http://agent_vm1:8001
      AGENT_AUTO_REGISTER: 'true'
      AGENT_HEARTBEAT_SECONDS: '10'
    depends_on:
    - router
    volumes:
    - agent_vm1_jobs:/app/agent_jobs
    ports:
    - 8001:8001
    networks:
    - agentic_net
    restart: unless-stopped

  agent_vm2:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    environment:
      AGENT_ID: vm2
      ROUTER_URL: http://router:8000
      AGENT_TOKEN: agent-secret
      AGENT_LABELS: '{"os":"linux","zone":"dev"}'
      SELF_URL: http://agent_vm2:8001
      AGENT_AUTO_REGISTER: 'true'
      AGENT_HEARTBEAT_SECONDS: '10'
    depends_on:
    - router
    volumes:
    - agent_vm2_jobs:/app/agent_jobs
    ports:
    - 8002:8001
    networks:
    - agentic_net
    restart: unless-stopped

  go_agent_vm1:
    build:
      context: .
      dockerfile: docker/Dockerfile.go-agent
    environment:
      AGENT_ID: go_vm1
      ROUTER_URL: http://router:8000
      AGENT_TOKEN: agent-secret
      AGENT_LABELS: '{"os":"linux","zone":"go"}'
      SELF_URL: http://go_agent_vm1:8001
      AGENT_AUTO_REGISTER: 'true'
      AGENT_HEARTBEAT_SECONDS: '10'
    depends_on:
    - router
    volumes:
    - go_agent_vm1_jobs:/app/agent_jobs
    ports:
    - 8011:8001
    networks:
    - agentic_net
    restart: unless-stopped

  go_agent_vm2:
    build:
      context: .
      dockerfile: docker/Dockerfile.go-agent
    environment:
      AGENT_ID: go_vm2
      ROUTER_URL: http://router:8000
      AGENT_TOKEN: agent-secret
      AGENT_LABELS: '{"os":"linux","zone":"go"}'
      SELF_URL: http://go_agent_vm2:8001
      AGENT_AUTO_REGISTER: 'true'
      AGENT_HEARTBEAT_SECONDS: '10'
    depends_on:
    - router
    volumes:
    - go_agent_vm2_jobs:/app/agent_jobs
    ports:
    - 8012:8001
    networks:
    - agentic_net
    restart: unless-stopped

  agent_vm3:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    environment:
      AGENT_ID: vm3
      ROUTER_URL: http://router:8000
      AGENT_TOKEN: agent-secret
      AGENT_LABELS: '{"os":"linux","zone":"qa"}'
      SELF_URL: http://agent_vm3:8001
      AGENT_AUTO_REGISTER: 'false'
      AGENT_HEARTBEAT_SECONDS: '10'
    depends_on:
    - router
    volumes:
    - agent_vm3_jobs:/app/agent_jobs
    ports:
    - 8003:8001
    networks:
    - agentic_net
    restart: unless-stopped

  agent_vm4:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    environment:
      AGENT_ID: vm4
      ROUTER_URL: http://router:8000
      AGENT_TOKEN: agent-secret
      AGENT_LABELS: '{"os":"linux","zone":"qa"}'
      SELF_URL: http://agent_vm4:8001
      AGENT_AUTO_REGISTER: 'false'
      AGENT_HEARTBEAT_SECONDS: '10'
    depends_on:
    - router
    volumes:
    - agent_vm4_jobs:/app/agent_jobs
    ports:
    - 8004:8001
    networks:
    - agentic_net
    restart: unless-stopped
networks:
  agentic_net:
    driver: bridge
    
volumes:
  postgres-db-volume: {}
  router_db: {}
  agent_vm1_jobs: {}
  agent_vm2_jobs: {}
  agent_vm3_jobs: {}
  agent_vm4_jobs: {}
  go_agent_vm1_jobs: {}
  go_agent_vm2_jobs: {}
